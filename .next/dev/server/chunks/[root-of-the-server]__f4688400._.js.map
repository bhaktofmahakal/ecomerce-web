{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///U:/ecomerce-web/lib/db.ts"],"sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n  description: string;\r\n  price: number;\r\n  category: string;\r\n  inventory: number;\r\n  lastUpdated: string;\r\n}\r\n\r\nconst PRODUCTS_FILE = path.join(process.cwd(), 'data', 'products.json');\r\n\r\n\r\nfunction ensureDataDirectory() {\r\n  const dir = path.dirname(PRODUCTS_FILE);\r\n  if (!fs.existsSync(dir)) {\r\n    fs.mkdirSync(dir, { recursive: true });\r\n  }\r\n}\r\n\r\n/**\r\n * Read all products from JSON file\r\n */\r\nexport async function getAllProducts(): Promise<Product[]> {\r\n  try {\r\n    ensureDataDirectory();\r\n    if (!fs.existsSync(PRODUCTS_FILE)) {\r\n      return [];\r\n    }\r\n    const data = fs.readFileSync(PRODUCTS_FILE, 'utf-8');\r\n    return JSON.parse(data);\r\n  } catch (error) {\r\n    console.error('Error reading products:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Get a single product by slug\r\n */\r\nexport async function getProductBySlug(slug: string): Promise<Product | null> {\r\n  const products = await getAllProducts();\r\n  return products.find((p) => p.slug === slug) || null;\r\n}\r\n\r\n/**\r\n * Get a single product by ID\r\n */\r\nexport async function getProductById(id: string): Promise<Product | null> {\r\n  const products = await getAllProducts();\r\n  return products.find((p) => p.id === id) || null;\r\n}\r\n\r\n/**\r\n * Add a new product\r\n */\r\nexport async function addProduct(product: Omit<Product, 'id' | 'lastUpdated'>): Promise<Product> {\r\n  ensureDataDirectory();\r\n  const products = await getAllProducts();\r\n  const newId = (Math.max(...products.map((p) => parseInt(p.id)), 0) + 1).toString();\r\n  const newProduct: Product = {\r\n    ...product,\r\n    id: newId,\r\n    lastUpdated: new Date().toISOString(),\r\n  };\r\n  products.push(newProduct);\r\n  fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));\r\n  return newProduct;\r\n}\r\n\r\n/**\r\n * Update an existing product\r\n */\r\nexport async function updateProduct(id: string, updates: Partial<Omit<Product, 'id'>>): Promise<Product | null> {\r\n  ensureDataDirectory();\r\n  const products = await getAllProducts();\r\n  const index = products.findIndex((p) => p.id === id);\r\n  if (index === -1) return null;\r\n\r\n  products[index] = {\r\n    ...products[index],\r\n    ...updates,\r\n    id: products[index].id, // Ensure ID doesn't change\r\n    lastUpdated: new Date().toISOString(),\r\n  };\r\n\r\n  fs.writeFileSync(PRODUCTS_FILE, JSON.stringify(products, null, 2));\r\n  return products[index];\r\n}\r\n\r\n/**\r\n * Get inventory statistics\r\n */\r\nexport async function getInventoryStats() {\r\n  const products = await getAllProducts();\r\n  const lowStockThreshold = 50;\r\n\r\n  return {\r\n    totalProducts: products.length,\r\n    totalInventory: products.reduce((sum, p) => sum + p.inventory, 0),\r\n    lowStockProducts: products.filter((p) => p.inventory < lowStockThreshold),\r\n    outOfStockProducts: products.filter((p) => p.inventory === 0),\r\n    categories: [...new Set(products.map((p) => p.category))],\r\n  };\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;;;AAaA,MAAM,gBAAgB,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAGvD,SAAS;IACP,MAAM,MAAM,4GAAI,CAAC,OAAO,CAAC;IACzB,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,MAAM;QACvB,wGAAE,CAAC,SAAS,CAAC,KAAK;YAAE,WAAW;QAAK;IACtC;AACF;AAKO,eAAe;IACpB,IAAI;QACF;QACA,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,gBAAgB;YACjC,OAAO,EAAE;QACX;QACA,MAAM,OAAO,wGAAE,CAAC,YAAY,CAAC,eAAe;QAC5C,OAAO,KAAK,KAAK,CAAC;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,EAAE;IACX;AACF;AAKO,eAAe,iBAAiB,IAAY;IACjD,MAAM,WAAW,MAAM;IACvB,OAAO,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,SAAS;AAClD;AAKO,eAAe,eAAe,EAAU;IAC7C,MAAM,WAAW,MAAM;IACvB,OAAO,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,OAAO;AAC9C;AAKO,eAAe,WAAW,OAA4C;IAC3E;IACA,MAAM,WAAW,MAAM;IACvB,MAAM,QAAQ,CAAC,KAAK,GAAG,IAAI,SAAS,GAAG,CAAC,CAAC,IAAM,SAAS,EAAE,EAAE,IAAI,KAAK,CAAC,EAAE,QAAQ;IAChF,MAAM,aAAsB;QAC1B,GAAG,OAAO;QACV,IAAI;QACJ,aAAa,IAAI,OAAO,WAAW;IACrC;IACA,SAAS,IAAI,CAAC;IACd,wGAAE,CAAC,aAAa,CAAC,eAAe,KAAK,SAAS,CAAC,UAAU,MAAM;IAC/D,OAAO;AACT;AAKO,eAAe,cAAc,EAAU,EAAE,OAAqC;IACnF;IACA,MAAM,WAAW,MAAM;IACvB,MAAM,QAAQ,SAAS,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;IACjD,IAAI,UAAU,CAAC,GAAG,OAAO;IAEzB,QAAQ,CAAC,MAAM,GAAG;QAChB,GAAG,QAAQ,CAAC,MAAM;QAClB,GAAG,OAAO;QACV,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QACtB,aAAa,IAAI,OAAO,WAAW;IACrC;IAEA,wGAAE,CAAC,aAAa,CAAC,eAAe,KAAK,SAAS,CAAC,UAAU,MAAM;IAC/D,OAAO,QAAQ,CAAC,MAAM;AACxB;AAKO,eAAe;IACpB,MAAM,WAAW,MAAM;IACvB,MAAM,oBAAoB;IAE1B,OAAO;QACL,eAAe,SAAS,MAAM;QAC9B,gBAAgB,SAAS,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,SAAS,EAAE;QAC/D,kBAAkB,SAAS,MAAM,CAAC,CAAC,IAAM,EAAE,SAAS,GAAG;QACvD,oBAAoB,SAAS,MAAM,CAAC,CAAC,IAAM,EAAE,SAAS,KAAK;QAC3D,YAAY;eAAI,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC,IAAM,EAAE,QAAQ;SAAG;IAC3D;AACF","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///U:/ecomerce-web/lib/auth.ts"],"sourcesContent":["/**\r\n * Simple API Key authentication for admin routes\r\n * In production, use proper OAuth2, JWT, or session-based auth\r\n */\r\n\r\nconst ADMIN_API_KEY = process.env.ADMIN_API_KEY || 'admin-secret-key-2024';\r\n\r\n/**\r\n * Verify admin API key\r\n */\r\nexport function verifyAdminKey(apiKey: string | null | undefined): boolean {\r\n  if (!apiKey) return false;\r\n  return apiKey === ADMIN_API_KEY;\r\n}\r\n\r\n/**\r\n * Extract API key from request headers\r\n */\r\nexport function getApiKeyFromRequest(headers: Headers): string | null {\r\n  const authHeader = headers.get('x-api-key');\r\n  if (authHeader) return authHeader;\r\n\r\n  const authBearer = headers.get('authorization');\r\n  if (authBearer?.startsWith('Bearer ')) {\r\n    return authBearer.slice(7);\r\n  }\r\n\r\n  return null;\r\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAED,MAAM,gBAAgB,QAAQ,GAAG,CAAC,aAAa,IAAI;AAK5C,SAAS,eAAe,MAAiC;IAC9D,IAAI,CAAC,QAAQ,OAAO;IACpB,OAAO,WAAW;AACpB;AAKO,SAAS,qBAAqB,OAAgB;IACnD,MAAM,aAAa,QAAQ,GAAG,CAAC;IAC/B,IAAI,YAAY,OAAO;IAEvB,MAAM,aAAa,QAAQ,GAAG,CAAC;IAC/B,IAAI,YAAY,WAAW,YAAY;QACrC,OAAO,WAAW,KAAK,CAAC;IAC1B;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///U:/ecomerce-web/app/api/products/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getAllProducts, addProduct } from '@/lib/db';\r\nimport { verifyAdminKey, getApiKeyFromRequest } from '@/lib/auth';\r\n\r\n/**\r\n * GET /api/products\r\n * Fetch all products\r\n * Public endpoint - no authentication required\r\n */\r\nexport async function GET(_request: NextRequest) {\r\n  try {\r\n    const products = await getAllProducts();\r\n    return NextResponse.json(products, {\r\n      headers: {\r\n        'Cache-Control': 'public, max-age=60, stale-while-revalidate=300',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching products:', error);\r\n    return NextResponse.json(\r\n      { message: 'Failed to fetch products', error: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * POST /api/products\r\n * Create a new product\r\n * Protected endpoint - requires API key\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Verify authentication\r\n    const apiKey = getApiKeyFromRequest(request.headers);\r\n    if (!verifyAdminKey(apiKey)) {\r\n      return NextResponse.json({ message: 'Unauthorized: Invalid or missing API key' }, { status: 401 });\r\n    }\r\n\r\n    // Parse request body\r\n    const body = await request.json();\r\n    const { name, slug, description, price, category, inventory } = body;\r\n\r\n    // Validate required fields\r\n    if (!name || !slug || price === undefined || inventory === undefined) {\r\n      return NextResponse.json(\r\n        { message: 'Missing required fields: name, slug, price, inventory' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create product\r\n    const newProduct = await addProduct({\r\n      name,\r\n      slug,\r\n      description: description || '',\r\n      price: parseFloat(price),\r\n      category: category || 'Electronics',\r\n      inventory: parseInt(inventory),\r\n    });\r\n\r\n    return NextResponse.json(newProduct, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating product:', error);\r\n    return NextResponse.json(\r\n      { message: 'Failed to create product', error: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAOO,eAAe,IAAI,QAAqB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,IAAA,6HAAc;QACrC,OAAO,gJAAY,CAAC,IAAI,CAAC,UAAU;YACjC,SAAS;gBACP,iBAAiB;YACnB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA4B,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACvG;YAAE,QAAQ;QAAI;IAElB;AACF;AAOO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,wBAAwB;QACxB,MAAM,SAAS,IAAA,qIAAoB,EAAC,QAAQ,OAAO;QACnD,IAAI,CAAC,IAAA,+HAAc,EAAC,SAAS;YAC3B,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2C,GAAG;gBAAE,QAAQ;YAAI;QAClG;QAEA,qBAAqB;QACrB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG;QAEhE,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,QAAQ,UAAU,aAAa,cAAc,WAAW;YACpE,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAwD,GACnE;gBAAE,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,MAAM,aAAa,MAAM,IAAA,yHAAU,EAAC;YAClC;YACA;YACA,aAAa,eAAe;YAC5B,OAAO,WAAW;YAClB,UAAU,YAAY;YACtB,WAAW,SAAS;QACtB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA4B,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACvG;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}